import smartpy as sp
FA2 = sp.io.import_template('fa2_lib.py')

class Token(FA2.Admin, FA2.MintNft, FA2.Fa2Nft):
    def __init__(self, admin, **kwargs):
        FA2.Fa2Nft.__init__(self, **kwargs)
        FA2.Admin.__init__(self, admin)


                
class Marketplace(sp.Contract):
    def __init__(self, token, metadata, admin):
        self.init(
            token=token,
            metadata=metadata,
            admin=admin,
            data=sp.big_map(
                tkey=sp.TNat,
                tvalue=sp.TRecord(
                    holder=sp.TAddress,
                    author=sp.TAddress,
                    amount=sp.TMutez,
                    token_id=sp.TNat,
                    collectable=sp.TBool)),
            token_id=0,
            )

    @sp.entry_point
    def mint(self, params):
        mint_params = sp.TList(
            sp.TRecord(
                to_=sp.TAddress,
                metadata=sp.TMap(sp.TString, sp.TBytes),
            ).layout(("to_", "metadata"))
        )
        c = sp.contract(mint_params, self.data.token, entry_point="mint").open_some()

        args = [sp.record(
            to_=sp.sender,
            metadata={ '': params.metadata })]
        sp.transfer(args, sp.mutez(0), c)
        
        self.data.data[self.data.token_id] = sp.record(
            holder=sp.self_address,
            author=sp.sender,
            amount=params.amount,
            token_id=self.data.token_id,
            collectable=True)
        self.data.token_id += 1
        
    @sp.entry_point
    def fa2_transfer(self, fa2, from_, to_, token_id, amount):
        c = sp.contract(sp.TList(sp.TRecord(from_=sp.TAddress, txs=sp.TList(sp.TRecord(amount=sp.TNat, to_=sp.TAddress, token_id=sp.TNat).layout(("to_", ("token_id", "amount")))))), fa2, entry_point='transfer').open_some()
        sp.transfer(sp.list([sp.record(from_=from_, txs=sp.list([sp.record(amount=amount, to_=to_, token_id=token_id)]))]), sp.mutez(0), c)

    @sp.entry_point
    def transfer(self, params):
        sp.set_type(params, sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))))
        sp.for transfer in params:
            sp.for tx in transfer.txs:
                # sp.verify(self.data.metadata.contains(tx.token_id), 'FA2_TOKEN_UNDEFINED')
                # sp.verify((sp.sender == transfer.from_) | (self.data.operators.contains(sp.record(operator = sp.sender, owner = transfer.from_, token_id = tx.token_id))), 'FA2_NOT_OPERATOR')
                sp.if tx.amount > 0:
                    self.data.data[tx.token_id].holder = tx.to_       
    @sp.entry_point
    def collect(self, params):
        # sp.verify(sp.amount == self.data.data[params.token_id].amount, "WrongAmount")
        # sp.verify(self.data.data[params.token_id].collectable, "NotCollectable")
        # sp.verify(self.data.data[params.token_id].author != sp.sender, "SenderNotAuthor")
        self.data.data[params.token_id].collectable = False
        self.data.data[params.token_id].holder = sp.sender

    @sp.entry_point
    def update_admin(self, params):
        sp.verify(sp.sender == self.data.admin, "NotAdmin")
        self.data.admin = params

    @sp.entry_point
    def collect_management_rewards(self, params):
        sp.verify(sp.sender == self.data.admin, "NotAdmin")
        sp.send(params.address, params.amount)

    

@sp.add_test(name = "Non Fungible Token")
def test():
    scenario = sp.test_scenario()
    
    admin = sp.test_account("admin")
    mark = sp.test_account("user1")
    elon = sp.test_account("user2")

    token_contract = Token(
        admin=admin.address,
        metadata=sp.utils.metadata_of_url(
            "ipfs://bafkreig7navbmocklcizrau7uz3sy6dagxtnnuxwg5r7fjyeyyxnnefpee"))
    scenario += token_contract

    scenario.h1("MarketPlace")
    marketplace = Marketplace(
        token_contract.address,
        sp.utils.metadata_of_url(
            "ipfs://bafkreig7navbmocklcizrau7uz3sy6dagxtnnuxwg5r7fjyeyyxnnefpee"
        ), admin.address)
    scenario += marketplace

    marketplace.mint(
        amount=sp.tez(100),
        metadata=sp.pack(
            "ipfs://bafkreibjtfyvd4ipj5hx6aa2xrganvlbh6eb3dfvnad4as743hk4zlarkm"
    )).run(sender=admin, valid=False, exception="FA2_NOT_ADMIN")
    token_contract.set_administrator(marketplace.address).run(sender=admin)
    marketplace.mint(
        amount=sp.tez(100),
        metadata= sp.pack(
            "ipfs://bafkreibjtfyvd4ipj5hx6aa2xrganvlbh6eb3dfvnad4as743hk4zlarkm"
        )).run(sender=admin)
    marketplace.mint(amount=sp.mutez(5_600_000), metadata=sp.pack("123423")).run(sender=mark)
    scenario.h1("Collect")
    marketplace.collect(token_id=1).run(sender=elon, amount=sp.mutez(5_600_000))

   

    marketplace.collect_management_rewards(
        amount=sp.mutez(1000),
        address=admin.address
    ).run(sender = admin)


