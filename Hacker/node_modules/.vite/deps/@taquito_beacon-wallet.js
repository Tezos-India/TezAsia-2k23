import {
  PermissionScope,
  getDAppClientInstance
} from "./chunk-FWP6ULO2.js";
import "./chunk-GLZCY7V2.js";
import {
  PermissionDeniedError,
  createIncreasePaidStorageOperation,
  createOriginationOperation,
  createSetDelegateOperation,
  createTransferOperation
} from "./chunk-ADIF5NGQ.js";
import "./chunk-VE2643KR.js";
import "./chunk-QX5IKVBM.js";
import "./chunk-W7S2ME4R.js";

// node_modules/@taquito/beacon-wallet/dist/taquito-beacon-wallet.es6.js
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
var BeaconWalletNotInitialized = class extends PermissionDeniedError {
  constructor() {
    super();
    this.name = "BeaconWalletNotInitialized";
    this.message = 'BeaconWallet needs to be initialized by calling `await BeaconWallet.requestPermissions({network: {type: "chosen_network"}})` first.';
  }
};
var MissingRequiredScopes = class extends PermissionDeniedError {
  constructor(requiredScopes) {
    super();
    this.requiredScopes = requiredScopes;
    this.name = "MissingRequiredScopes";
    this.message = `Required permissions scopes: ${requiredScopes.join(",")} were not granted.`;
  }
};
var VERSION = {
  "commitHash": "15732f9b7d575aa46427c94501fb8677a754b733",
  "version": "17.1.1"
};
var BeaconWallet = class {
  constructor(options) {
    this.client = getDAppClientInstance(options);
  }
  validateRequiredScopesOrFail(permissionScopes, requiredScopes) {
    const mandatoryScope = new Set(requiredScopes);
    for (const scope of permissionScopes) {
      if (mandatoryScope.has(scope)) {
        mandatoryScope.delete(scope);
      }
    }
    if (mandatoryScope.size > 0) {
      throw new MissingRequiredScopes(Array.from(mandatoryScope));
    }
  }
  requestPermissions(request) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.client.requestPermissions(request);
    });
  }
  getPKH() {
    return __awaiter(this, void 0, void 0, function* () {
      const account = yield this.client.getActiveAccount();
      if (!account) {
        throw new BeaconWalletNotInitialized();
      }
      return account.address;
    });
  }
  mapTransferParamsToWalletParams(params) {
    return __awaiter(this, void 0, void 0, function* () {
      let walletParams;
      yield this.client.showPrepare();
      try {
        walletParams = yield params();
      } catch (err) {
        yield this.client.hideUI();
        throw err;
      }
      return this.removeDefaultParams(walletParams, yield createTransferOperation(this.formatParameters(walletParams)));
    });
  }
  mapIncreasePaidStorageWalletParams(params) {
    return __awaiter(this, void 0, void 0, function* () {
      let walletParams;
      yield this.client.showPrepare();
      try {
        walletParams = yield params();
      } catch (err) {
        yield this.client.hideUI();
        throw err;
      }
      return this.removeDefaultParams(walletParams, yield createIncreasePaidStorageOperation(this.formatParameters(walletParams)));
    });
  }
  mapOriginateParamsToWalletParams(params) {
    return __awaiter(this, void 0, void 0, function* () {
      let walletParams;
      yield this.client.showPrepare();
      try {
        walletParams = yield params();
      } catch (err) {
        yield this.client.hideUI();
        throw err;
      }
      return this.removeDefaultParams(walletParams, yield createOriginationOperation(this.formatParameters(walletParams)));
    });
  }
  mapDelegateParamsToWalletParams(params) {
    return __awaiter(this, void 0, void 0, function* () {
      let walletParams;
      yield this.client.showPrepare();
      try {
        walletParams = yield params();
      } catch (err) {
        yield this.client.hideUI();
        throw err;
      }
      return this.removeDefaultParams(walletParams, yield createSetDelegateOperation(this.formatParameters(walletParams)));
    });
  }
  formatParameters(params) {
    if (params.fee) {
      params.fee = params.fee.toString();
    }
    if (params.storageLimit) {
      params.storageLimit = params.storageLimit.toString();
    }
    if (params.gasLimit) {
      params.gasLimit = params.gasLimit.toString();
    }
    return params;
  }
  removeDefaultParams(params, operatedParams) {
    if (!params.fee) {
      delete operatedParams.fee;
    }
    if (!params.storageLimit) {
      delete operatedParams.storage_limit;
    }
    if (!params.gasLimit) {
      delete operatedParams.gas_limit;
    }
    return operatedParams;
  }
  sendOperations(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const account = yield this.client.getActiveAccount();
      if (!account) {
        throw new BeaconWalletNotInitialized();
      }
      const permissions = account.scopes;
      this.validateRequiredScopesOrFail(permissions, [PermissionScope.OPERATION_REQUEST]);
      const { transactionHash } = yield this.client.requestOperation({ operationDetails: params });
      return transactionHash;
    });
  }
  /**
   *
   * @description Removes all beacon values from the storage. After using this method, this instance is no longer usable.
   * You will have to instantiate a new BeaconWallet.
   */
  disconnect() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.client.destroy();
    });
  }
  /**
   *
   * @description This method removes the active account from local storage by setting it to undefined.
   */
  clearActiveAccount() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.client.setActiveAccount();
    });
  }
};
export {
  BeaconWallet,
  BeaconWalletNotInitialized,
  MissingRequiredScopes,
  VERSION
};
//# sourceMappingURL=@taquito_beacon-wallet.js.map
