#import "./NFT.jsligo" "NFT"
/* ERROR MAP FOR UI DISPLAY or TESTS
    const errorMap : map<string,string> = Map.literal(list([
      ["0", "Enter a positive and not null amount"],
      ["1", "Operation not allowed, you need to be administrator"],
      ["2", "You cannot sell more than your current balance"],
      ["3", "Cannot find the offer you entered for buying"],
      ["4", "You entered a quantity to buy than is more than the offer quantity"],
      ["5", "Not enough funds, you need to pay at least quantity * offer price to get the tokens"],
      ["6", "Cannot find the contract relative to implicit address"],
      ["7", "Answer Hash provided is Incorrect Cannot buy"],
      ["8", "Invaild question answer not stored"]
    ]));
*/

type offer = {
  owner: address,
  price: nat
};

type storage = {
  administrators: set<address>,
  offers: map<nat, offer>, //user sells an offer
  ledger: NFT.Ledger.t,
  metadata: NFT.Metadata.t,
  token_metadata: NFT.TokenMetadata.t,
  operators: NFT.Operators.t,
  token_ids: set<NFT.token_id>
};

type ret = [list<operation>, storage];

@entry
const transfer = (p: NFT.transfer, s: storage): ret => {
  const ret2: [list<operation>, NFT.storage] =
    NFT.transfer(
      [
        p,
        {
          ledger: s.ledger,
          metadata: s.metadata,
          token_metadata: s.token_metadata,
          operators: s.operators,
          token_ids: s.token_ids
        }
      ]
    );
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
      token_ids: ret2[1].token_ids
    }
  ]
};

@entry
const balance_of = (p: NFT.balance_of, s: storage): ret => {
  const ret2: [list<operation>, NFT.storage] =
    NFT.balance_of(
      [
        p,
        {
          ledger: s.ledger,
          metadata: s.metadata,
          token_metadata: s.token_metadata,
          operators: s.operators,
          token_ids: s.token_ids
        }
      ]
    );
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
      token_ids: ret2[1].token_ids
    }
  ]
};

@entry
const update_operators = (p: NFT.update_operators, s: storage): ret => {
  const ret2: [list<operation>, NFT.storage] =
    NFT.update_ops(
      [
        p,
        {
          ledger: s.ledger,
          metadata: s.metadata,
          token_metadata: s.token_metadata,
          operators: s.operators,
          token_ids: s.token_ids
        }
      ]
    );
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
      token_ids: ret2[1].token_ids
    }
  ]
};

@entry
const mint = (
  [token_id, name, description, symbol, ipfsUrl, answerHash]
    : [nat, bytes, bytes, bytes, bytes, bytes],
  s: storage
): ret => {
  let opsList : list<operation> = list([]) as list<operation>;
  if (Tezos.get_amount() < (1 as tez)){ 
    return failwith("Insufficient minting fee");
  }
  else {
    let amtEx : tez = match (((Tezos.get_amount ()) - (1 as tez)), {
      Some: (x : tez) => x,
      None: () => (failwith("Not valid amount") as tez)
    });
    opsList = list([Tezos.transaction(
      unit,
      amtEx,
      Tezos.get_contract_with_error(Tezos.get_sender(), "6")
    )]) as list<operation>;
  }
  const token_info: map<string, bytes> =
    Map.literal(
      list(
        [
          ["name", name],
          ["description", description],
          ["interfaces", (bytes `["TZIP-12"]`)],
          ["thumbnailUri", ipfsUrl],
          ["symbol", symbol],
          ["decimals", (bytes `0`)],
          ["answerHash", answerHash]
        ]
      )
    ) as map<string, bytes>;
  return [
    opsList,
    {
      ...s,
      ledger: Big_map.add(token_id, Tezos.get_sender(), s.ledger) as
        NFT.Ledger.t,
      token_metadata: Big_map.add(
        token_id,
        { token_id: token_id, token_info: token_info },
        s.token_metadata
      ),
      operators: Big_map.empty as NFT.Operators.t,
      token_ids: Set.add(token_id, s.token_ids)
    }
  ]
};

@entry
const sell = ([token_id, price]: [nat, nat], s: storage): ret => {
  //check balance of seller

  const sellerBalance =
    NFT.Storage.get_balance(
      {
        ledger: s.ledger,
        metadata: s.metadata,
        operators: s.operators,
        token_metadata: s.token_metadata,
        token_ids: s.token_ids
      },
      Tezos.get_source(),
      token_id
    );
  if (sellerBalance != (1 as nat)) return failwith("2");
  //need to allow the contract itself to be an operator on behalf of the seller

  const newOperators =
    NFT.Operators.add_operator(
      s.operators,
      Tezos.get_source(),
      Tezos.get_self_address(),
      token_id
    );
  //DECISION CHOICE: if offer already exists, we just override it

  return [
    list([]) as list<operation>,
    {
      ...s,
      offers: Map.add(
        token_id,
        { owner: Tezos.get_source(), price: price },
        s.offers
      ),
      operators: newOperators
    }
  ]
};

@entry
const buy = ([token_id, seller, answerHash]: [nat, address, bytes], s: storage): ret => {
  //search for the offer

  return match(
    Map.find_opt(token_id, s.offers),
    {
      None: () => failwith("3"),
      Some: (offer: offer) => {
        // Check if answer hash is correct
        let storedMetadata : NFT.TokenMetadata.data = NFT.TokenMetadata.get_token_metadata(token_id, s.token_metadata);
        let storedAnswerHash :  bytes = match(Map.find_opt("answerHash", storedMetadata.token_info),{
          Some: (sAnsHash as bytes) => sAnsHash,
          None: () => (failwith("8") as bytes)
        });
        if(storedAnswerHash != answerHash) return failwith("7");

        //check if amount have been paid enough
        if (Tezos.get_amount() < offer.price * (1 as mutez)) return failwith(
          "5"
        );
        // prepare transfer of XTZ to seller

        const op =
          Tezos.transaction(
            unit,
            offer.price * (1 as mutez),
            Tezos.get_contract_with_error(seller, "6")
          );
        //transfer tokens from seller to buyer

        const ledger =
          NFT.Ledger.transfer_token_from_user_to_user(
            s.ledger,
            token_id,
            seller,
            Tezos.get_source()
          );
        //remove offer

        return [
          list([op]) as list<operation>,
          {
            ...s,
            offers: Map.update(token_id, None(), s.offers),
            ledger: ledger
          }
        ]
      }
    }
  )
};
@entry
const withdraw = (
  _: unit,
  s: storage
): ret => {
  if (!Set.mem(Tezos.get_sender(), s.administrators)) return failwith("1");
  const contBalance = Tezos.get_balance();
  return [
    list([
      Tezos.transaction(
        unit,          
        contBalance,     
        Tezos.get_contract_with_error(Tezos.get_sender(), "6")
      )
    ]) as list<operation>,
    s
  ]
};
